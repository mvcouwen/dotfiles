set nocompatible
let g:mapleader = "\<space>"
let g:maplocalleader = ","

" vim-plugin section

" Install vim plug if not installed
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Specify a directory for plugins
call plug#begin('~/.vim/plugged')

" Plugins
Plug 'morhetz/gruvbox'

Plug 'itchyny/lightline.vim'
set laststatus=2
set showtabline=1
set noshowmode

Plug 'itchyny/vim-gitbranch'

Plug 'lervag/vimtex'
let g:tex_flavor = 'latex'
let g:vimtex_compiler_latexmk = {
    \ 'continuous' : 0,
    \ }
let g:vimtex_complete_enabled = v:false
let g:vimtex_view_method = 'skim'

Plug 'honza/vim-snippets'

Plug 'airblade/vim-gitgutter'

Plug 'christoomey/vim-tmux-navigator'

Plug 'benmills/vimux'

" Initialize plugin system
call plug#end()

if $COLORTERM == "truecolor" || $COLORTERM == "24bit"
    set termguicolors
endif
set background=dark
try
    colorscheme gruvbox
catch
endtry
set guifont=Hack\ Nerd\ Font
filetype plugin indent on
set omnifunc=syntaxcomplete#Complete
set mouse=a
set tabstop=4 " the amount of spaces that one tab is worth
set softtabstop=4 " determines the amount of whitespace introduced by typing <tab>
set shiftwidth=4 " the amount of spaces used for indenting, i.e. when using > en <
set expandtab " expand tabs to spaces
set smarttab " whitespace at beginning of a line introduced by <tab> is shiftwidth instead of softtabstop
set autoindent
set breakindent
set breakindentopt=shift:2
set linebreak " wraps lines without inserting line breaks
set hidden " make buffers work better
set backspace=2 " make backspace work across lines
set number

" netrw settings
let g:netrw_liststyle=3
let g:netrw_banner=0
nnoremap <silent> <leader>nn :<c-u>Explore<cr>
nnoremap <silent> <leader>nv :<c-u>Vexplore!<cr>
nnoremap <silent> <leader>nh :<c-u>Hexplore<cr>

" Lightline configuration
let g:lightline = {
    \ 'enable': {'statusline': 1, 'tabline': 1},
    \ 'colorscheme': 'gruvbox',
    \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
    \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
    \ 'component_function': {
    \   'gitinfo' : 'GitInfo',
    \ },
    \ 'active': {
    \   'left': [   ['mode', 'paste' ],
    \               ['gitinfo', 'readonly', 'filename', 'modified'],
    \               [] ],
    \   'right': [  ['lineinfo'],
    \               ['percent'],
    \               ['fileformat', 'fileencoding', 'filetype'] ]
    \ },
    \ 'tabline': {'right': [[]]},
    \ 'tabline_separator': {'left':"\ue0b0",'right':''},
    \ 'tabline_subseparator': {'left':'\ue0b1','right':''}
    \ }

function! GitInfo() abort
    let branchname = gitbranch#name()
    let [a,m,r] = GitGutterGetHunkSummary()
    if empty(branchname)
        return ''
    else
        return printf('%s +%d ~%d -%d',branchname,a,m,r)
    endif
endfunction

" Define lightline colorscheme
" This is heavily based on the lightline colorscheme from
" https://github.com/morhetz/gruvbox
function! s:getGruvColor(group)
  let guiColor = synIDattr(hlID(a:group), "fg", "gui") 
  let termColor = synIDattr(hlID(a:group), "fg", "cterm") 
  return [ guiColor, termColor ]
endfunction

let s:bg0 = s:getGruvColor('GruvboxBg0')
let s:bg1 = s:getGruvColor('GruvboxBg1')
let s:bg2 = s:getGruvColor('GruvboxBg2')
let s:bg3 = s:getGruvColor('GruvboxBg3')
let s:bg4 = s:getGruvColor('GruvboxBg4')
let s:fg1 = s:getGruvColor('GruvboxFg1')
let s:fg4 = s:getGruvColor('GruvboxFg4')

let s:yellow = s:getGruvColor('GruvboxYellow')
let s:purple = s:getGruvColor('GruvboxPurple')
let s:aqua = s:getGruvColor('GruvboxAqua')
let s:red = s:getGruvColor('GruvboxRed')
let s:green = s:getGruvColor('GruvboxGreen')
let s:orange= s:getGruvColor('GruvboxOrange')
let s:blue= s:getGruvColor('GruvboxBlue')

let s:p = {'normal':{}, 'inactive':{}, 'command':{}, 'insert':{}, 'replace':{}, 'visual':{}, 'tabline':{}, 'terminal':{}}
let s:p.normal.left = [ [ s:bg0, s:aqua, 'bold' ], [ s:fg4, s:bg2 ] ]
let s:p.normal.right = [ [ s:bg0, s:aqua ], [ s:fg4, s:bg2 ] ]
let s:p.normal.middle = [ [ s:fg4, s:bg1 ] ]
let s:p.inactive.right = [ [ s:bg4, s:bg1 ], [ s:bg4, s:bg1 ] ]
let s:p.inactive.left =  [ [ s:bg4, s:bg1 ], [ s:bg4, s:bg1 ] ]
let s:p.inactive.middle = [ [ s:bg4, s:bg1 ] ]
let s:p.command.left = [ [ s:bg0, s:blue, 'bold' ], [ s:fg1, s:bg3 ] ]
let s:p.command.right = [ [ s:bg0, s:blue], [ s:fg1, s:bg3 ] ]
let s:p.command.middle = [ [ s:fg4, s:bg2 ] ]
let s:p.insert.left = [ [ s:bg0, s:green, 'bold' ], [ s:fg1, s:bg3 ] ]
let s:p.insert.right = [ [ s:bg0, s:green ], [ s:fg1, s:bg3 ] ]
let s:p.insert.middle = [ [ s:fg4, s:bg2 ] ]
let s:p.terminal.left = [ [ s:bg0, s:purple, 'bold' ], [ s:fg1, s:bg3 ] ]
let s:p.terminal.right = [ [ s:bg0, s:purple], [ s:fg1, s:bg3 ] ]
let s:p.terminal.middle = [ [ s:fg4, s:bg2 ] ]
let s:p.replace.left = [ [ s:bg0, s:red, 'bold' ], [ s:fg1, s:bg3 ] ]
let s:p.replace.right = [ [ s:bg0, s:red], [ s:fg1, s:bg3 ] ]
let s:p.replace.middle = [ [ s:fg4, s:bg2 ] ]
let s:p.visual.left = [ [ s:bg0, s:yellow, 'bold' ], [ s:fg1, s:bg3 ] ]
let s:p.visual.right = [ [ s:bg0, s:yellow], [ s:fg1, s:bg3 ] ]
let s:p.visual.middle = [ [ s:fg4, s:bg2 ] ]
let s:p.tabline.left = [ [ s:fg4, s:bg2 ] ]
let s:p.tabline.tabsel = [ [ s:bg0, s:yellow ] ]
let s:p.tabline.middle = [ [ s:fg4, s:bg1 ] ]
let s:p.tabline.right = [ [ s:fg4, s:bg1 ] ]
let s:p.normal.error = [ [ s:bg0, s:red] ]
let s:p.normal.warning = [ [ s:bg0, s:orange] ]

try
    let g:lightline#colorscheme#gruvbox#palette = lightline#colorscheme#flatten(s:p) "flatten makes pairs of pairs into quadruples
catch
endtry

" Settings for coc.nvim
set cmdheight=1 "one line for under statusline
set updatetime=500 "time vim waits before triggering plugin, standard 4000, too low can lead to highlighting glitches.
set signcolumn=yes "sign column left of line numbers
set shortmess+=c "don't pass messages to ins-completion-menu, i.e. do not show `match n of m'

" Implement the use of the TAB-key.
" If inside jumpable snippet, go to next placeholder.
" If not, insert a <TAB> character.

" Enable italics
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"

""" LaTeX commands

augroup tex_config
    autocmd!
    autocmd User VimtexEventQuit call vimtex#compiler#clean(0)
    autocmd FileType tex nnoremap <buffer><silent> <plug>(build) :CocCommand latex.Build<CR>
    autocmd FileType tex nnoremap <buffer><silent> <plug>(view) :CocCommand latex.ForwardSearch<CR>
augroup END

""" Python commands

augroup python_config
    autocmd!
    autocmd FileType python nnoremap <buffer><silent> <plug>(execute) :CocCommand python.execInTerminal<CR>
    autocmd FileType python vnoremap <buffer><silent> <plug>(execute) :CocCommand python.execSelectionInTerminal<CR>
    autocmd FileType python nnoremap <buffer><silent> <plug>(view) :CocCommand python.viewOutput<CR>
augroup END

augroup java_config
    autocmd!
    autocmd FileType java nnoremap <buffer><silent> <plug>(execute) :call VimuxRunCommand("javac " . bufname("%") . " && " . "java " . expand("%:t:r"))<CR>
augroup END

""" Magma commands
autocmd BufEnter *.m :setlocal filetype=magma

